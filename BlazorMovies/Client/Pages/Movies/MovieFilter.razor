@page "/movies/search"
@inject NavigationManager navigationManager
@inject IMoviesRepository moviesRepository

<div class="container d-block mb-2">
    <h3 class="d-inline">MovieFilter</h3>
    <a class="btn btn-primary float-right" href="/movies/create"> Create</a>
</div>
<div class="container">
    <div class="form-inline">
        <div class="form-group mx-1 mb-2">
            <label for="title" class="sr-only">Title</label>
            <input type="text" class="form-control" id="title" placeholder="Movie TItle"
                   @bind-value="title"
                   @bind-value:event="oninput"
                   @onkeypress="@((KeyboardEventArgs e)=>TitleKeyPress(e))" />
        </div>
        <div class="form-group mx-2 mb-2">
            <select class="form-control" @bind="selectedGenre">
                <option value="0"> -Select a Genre- </option>
                @foreach (var genre in Genres)
                {
                    <option value="@genre.Id">@genre.Name</option>
                }
            </select>
        </div>

        <div class="form-group mx-2 mb-2">
            <input type="checkbox" class="form-check-input" id="upcomingReleases" @bind="upcomingReleases" />
            <label class="form-check-label" for="upcomingReleases">Upcoming Release</label>
        </div>

        <div class="form-group mx-2 mb-2">
            <input type="checkbox" class="form-check-input" id="upcomingReleases" @bind="inTheatres" />
            <label class="form-check-label" for="inTheatres">In Theatres</label>
        </div>
        <div class="form-group mx-2 mb-2">
            <button class="btn btn-primary mx-1" @onclick="SearchForMovies">Filter</button>
            <button class="btn btn-danger mx-1" @onclick="Clear">Clear</button>
        </div>
    </div>
    <div>
        <MoviesList Movies="movies"></MoviesList>

    </div>

</div>

@code {
    // declare all the variables and parameters
    string title = "";
    string selectedGenre = "0";
    bool upcomingReleases = false;
    bool inTheatres = false;
    private List<Genre> Genres = new List<Genre>()
        {
            new Genre() { Id = 1, Name = "Action" },
            new Genre() { Id = 2, Name = "Adventure" },
            new Genre() { Id = 4, Name = "Kids" },
            new Genre() { Id = 5, Name = "Romance" },
            new Genre() { Id = 6, Name = "Thriller" }
        };
    private List<Movie> movies;
    private List<Movie> movies1;


    //load up the movie data on start up


    protected override async Task OnInitializedAsync()
    {
        try
        {
            movies1 = await moviesRepository.GetMovies();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        movies = movies1;
    }




    // run the search
    private void SearchForMovies()
    {

        movies = movies1.Where(x => x.Title.Contains(title)).ToList();

        Console.WriteLine($"title:{title}");
        Console.WriteLine($"selectedGenre:{selectedGenre}");
        Console.WriteLine($"upcomingReleases:{upcomingReleases}");
        Console.WriteLine($"inTheatres:{inTheatres}");
    }


    // on pressing enter, run the filter
    private void TitleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchForMovies();
        }
    }

    // clear the filter
    private void Clear()
    {

        movies = movies1;

        title = "";
        selectedGenre = "0";
        upcomingReleases = false;
        inTheatres = false;
    }


}
