@inject IPeopleRepository peopleRepository


<EditForm Model="movie" OnValidSubmit="OnDataAnnotationsValidated">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label> Movie Title </label>
        <InputText class="form-control" @bind-Value="@movie.Title"></InputText>
        <ValidationMessage For="@(()=> movie.Title)" />
    </div>
    <div class="form-group">
        <label> Movie Summary</label>
        <InputText class="form-control" @bind-Value="@movie.Summary"></InputText>
        <ValidationMessage For="@(()=> movie.Summary)" />
    </div>
    <div class="form-group">
        <input type="checkbox" class="form-check-input" id="inTheatres" @bind="movie.InTheatres" />
        <label class="form-check-label" for="inTheatres">In Theatres</label>
    </div>

    <div class="form-group">
        <label> Movie Trailer</label>
        <InputText class="form-control" @bind-Value="@movie.Trailer"></InputText>
        <ValidationMessage For="@(()=> movie.Trailer)" />
    </div>
    <div class="form-group">
        <label> Movie Genre</label>
        <MultipleSelector NoSelected="NotSelected" Selected="Selected" />
    </div>

    <div class="form-group">
        <label> Actors</label>
        <MultipleSelectorTypeahead Context="person" SearchMethod="SearchMethod" SelectedElements="SelectedActors">

            <MyResultTemplate>
                <img style="width: 50px;" src="@person.Picture" />
                @person.Name
            </MyResultTemplate>

            <MyListTemplate>
                @person.Name / <input type="text" placeholder="Character" @bind="person.Character" />
            </MyListTemplate>

        </MultipleSelectorTypeahead>
    </div>


    <div class="form-group">
        <InputImage Label="Movie Poster" OnSelectedImage="PosterSelected" ImageURL="@imageURL" />
    </div>
    <div class="form-group">
        <button class="btn btn-primary" type="submit"> Save </button>
    </div>


</EditForm>



@code {

    [Parameter] public Movie movie { get; set; }

    [Parameter] public EventCallback OnValidSubmit { get; set; }

    [Parameter] public List<Genre> SelectedGenres { get; set; } = new List<Genre>();

    [Parameter] public List<Genre> NotSelectedGenres { get; set; } = new List<Genre>();

    [Parameter] public List<Person> SelectedActors { get; set; } = new List<Person>();

    private List<MultipleSelectorModel> Selected = new List<MultipleSelectorModel>();
    private List<MultipleSelectorModel> NotSelected = new List<MultipleSelectorModel>();

    private string imageURL;


    @* Given that the InputImage razor component can be used for both creating and editing images, we need to check if there are any pictures to uploaded at the beginning for editing *@
    protected override void OnInitialized()
    {
        @* if any genre types have been previously assigned, organise them into selected and non-selected *@
        Selected = SelectedGenres.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
        NotSelected = NotSelectedGenres.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();

        @* i a picture has been previously assigned, then show it. *@
        if (!string.IsNullOrEmpty(movie.Poster))
        {
            imageURL = movie.Poster;
            movie.Poster = null;
        }
    }

    private void PosterSelected(string imageBase64)
    {
        movie.Poster = imageBase64;
        imageURL = null;
        Console.WriteLine(imageBase64);
    }

    private async Task<IEnumerable<Person>> SearchMethod(string searchText)
    {
        return await peopleRepository.GetPersonByName(searchText);
    }

    private async Task OnDataAnnotationsValidated()
    {
        //movie.MovieGenres = Selected
        //    .Select(x => new MoviesGenres { GenreId = int.Parse(x.Key) }).ToList();

        //movie.MovieActors = SelectedActors
        //    .Select(x => new MoviesPersons { PersonId = x.Id, Character = x.Character }).ToList();

        if (!string.IsNullOrWhiteSpace(movie.Poster)) { imageURL = null; }
        Console.WriteLine("OnDatAnnotationsValidated invoking OnValidSubmit");
        await OnValidSubmit.InvokeAsync(null);
    }

}
