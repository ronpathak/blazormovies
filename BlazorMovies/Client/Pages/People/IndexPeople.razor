@page "/people"
@inject NavigationManager navigationManager
@inject IPeopleRepository peopleRepository


<h3>Index Actors</h3>

<div class="form-group">
    <a class="btn btn-info" href="people/create">Add Actors</a>
</div>



<Paginator CurrentPage="@PageSelected" TotalAmountPages="totalAmountPages" SelectedPage="SelectedPage"/>

<GenericList List="People">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in People)
                {
                <tr>
                    <td><img style="height: 50px;" src="@item.Picture"/></td>
                    <td>@item.Name</td>
                    <td>
                        <a class="btn btn-success" href="/people/edit/@item.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => DeletePerson(item.Id))">Delete</button>
                    </td>
                </tr>
                }
            </tbody>
        </table>
    </WholeListTemplate>
</GenericList>

@code {

    List<Person> People;

    private int PageSelected = 1;
    private int RecordsPerPageSelected = 2;

    private int totalAmountPages;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadPeople(PageSelected, RecordsPerPageSelected);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task<List<Person>> LoadPeople(int PageSelected, int RecordsPerPageSelected)
    {
        CalculatePages();
        People = await peopleRepository.GetPeopleByPage(PageSelected, RecordsPerPageSelected);
        return People;
    }

    private async Task<int> CalculatePages()
    {
        int NumberRecords = await peopleRepository.CountPeople();
        if (NumberRecords % RecordsPerPageSelected == 0)
        {
            totalAmountPages = NumberRecords / RecordsPerPageSelected;
        }
        else
        {
            totalAmountPages = (NumberRecords / RecordsPerPageSelected)+1;
        }

        return totalAmountPages;
    }


    private async Task SelectedPage(int page)
    {
        PageSelected = page;
        await LoadPeople(PageSelected, RecordsPerPageSelected);
    }

    private async Task DeletePerson(int Id)
    {
        await peopleRepository.DeletePerson(Id);
        People = await peopleRepository.GetPeople();
    }
}