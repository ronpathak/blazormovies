@inject NavigationManager navigationManager
@inject IMoviesRepository moviesRepository

<div>

    <div class="movies-container">



        @if (Movies == null)
        {
            <text> Loading...</text>
        }
        else if (Movies.Count == 0)
        {
            <text>There are no movies listed</text>
        }
        else
        {


            @foreach (var movie in Movies)
            {



                <IndividualMovie movie="movie"
                                 Delete="DeleteMovie"></IndividualMovie>



            };
       }
    </div>
</div>


<ConfirmationModalt @ref="confirmation" onConfirm="onConfirm" onCancel="onCancel">
    <RF1> Are you sure you want to delete @movieToBeDeleted.Title</RF1>
</ConfirmationModalt>


@code {


    ConfirmationModalt confirmation;

    [Parameter]
    public List<Movie> Movies { get; set; }



    Movie movieToBeDeleted;
    private void DeleteMovie(Movie movie)
    {
        confirmation.Show();
        movieToBeDeleted = movie;
    }

    void onConfirm()
    {

        Movies.Remove(movieToBeDeleted);
        confirmation.Hide();
        movieToBeDeleted = null;
    }

    void onCancel()
    {
        confirmation.Hide();
        movieToBeDeleted = null;

    }

    private async Task DeleteMovie(int Id)
    {
        await moviesRepository.DeleteMovie(Id);
        Movies = await moviesRepository.GetMovies();
    }

}
